/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI;

import Application.Controller.Simulation;
import Domain.Client.ClientProfile;
import Domain.Client.Itinary;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author Élise
 */
public class ModifyClientProfile extends javax.swing.JFrame {
    private Simulation controller;
    private ClientProfile profile = null;
    private DefaultListModel listModel;
    /**
     * Creates new form ModifyClientProfile
     */
    public ModifyClientProfile(Simulation _controller) 
    {
        controller = _controller;
        initComponents();
        setDefaultCloseOperation(javax.swing.JFrame.DISPOSE_ON_CLOSE);
    }
    public ModifyClientProfile(Simulation _controller, ClientProfile _profile) 
    {
        controller = _controller;
        profile = _profile;
        initComponents();
        setDefaultCloseOperation(javax.swing.JFrame.DISPOSE_ON_CLOSE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        lblItinary = new javax.swing.JLabel();
        scrollPaneItinary = new javax.swing.JScrollPane();
        lstItinary = new javax.swing.JList();
        btnAddItinary = new javax.swing.JButton();
        btnOk = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        lblName = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblTitle.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblTitle.setText("Ajouter, modifier ou supprimer un profil client");

        lblItinary.setText("Itinéraires: ");

        scrollPaneItinary.setViewportView(lstItinary);

        btnAddItinary.setText("Ajouter un itinéraire");
        btnAddItinary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddItinaryActionPerformed(evt);
            }
        });

        btnOk.setText("Ok");
        btnOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOkActionPerformed(evt);
            }
        });

        btnDelete.setText("Supprimer");        
        
        lblName.setText("Nom : ");
        lblName.setName("lblName");

        txtName.setName("txtName"); 
        listModel = new DefaultListModel();
        if( profile != null)
        {
            btnDelete.setVisible(true);
            btnDelete.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    btnDeleteActionPerformed(evt);
                }
            });
            txtName.setText(profile.getName());
            
            
            for(int i = 0; i < this.profile.getItinary().size(); i++)
            {
                listModel.addElement(this.profile.getItinary().get(i).getTrip().getName() + ": " + this.profile.getItinary().get(i).getOriginStop().getName() + " | " + this.profile.getItinary().get(i).getDestinationStop().getName() );
            }
            lstItinary.setModel(listModel);
        }else{
            btnDelete.setVisible(false);
        }
        
        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTitle)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblName)
                                    .addComponent(lblItinary))
                                .addGap(56, 56, 56)
                                .addComponent(txtName))
                            .addComponent(scrollPaneItinary, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnAddItinary)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnOk, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(70, 70, 70)
                .addComponent(btnDelete)
                .addGap(96, 96, 96))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(lblTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblName)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addComponent(lblItinary)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(scrollPaneItinary, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addComponent(btnAddItinary)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnOk)
                    .addComponent(btnDelete))
                .addContainerGap())
        );

        pack();
    }
    
    private void btnOkActionPerformed(java.awt.event.ActionEvent evt) {                                      
        if(!(txtName.getText().isEmpty()) && lstItinary.getModel().getSize() > 0 )
        {
            if (profile == null)
            {
                boolean nameExists = false; 
                for(int i = 0; i < controller.getListClientProfile().size(); i++)
                {
                    if(controller.getListClientProfile().get(i).getName().equalsIgnoreCase(txtName.getText()))
                    {
                        nameExists = true;
                        break;
                    }
                }
                if(!nameExists)
                {
                    ClientProfile newProfile = new ClientProfile();
                    newProfile.setName(txtName.getText());
                    List<Itinary> itinaries = new ArrayList<Itinary>();
                    for(int j = 0; j < listModel.getSize(); j++)
                    {
                        String element = lstItinary.getModel().getElementAt(j).toString();
                        String tripName = element.substring(0, element.indexOf(":"));
                        String originNodeName = element.substring(element.indexOf(" ") + 1, element.indexOf("|") - 1);
                        String destinationNodeName = element.substring(element.indexOf("|") + 2);

                        Domain.Client.Itinary itinary = new Domain.Client.Itinary((Domain.Node.Stop)controller.getNodeByName(originNodeName),
                                                                                  (Domain.Node.Stop)controller.getNodeByName(destinationNodeName),
                                                                                  controller.getTripByName(tripName));
                        itinaries.add(itinary);
                    }
                    newProfile.setItinary(itinaries);
                    controller.addClientProfile(newProfile);
                    dispose();
                }else{
                    JOptionPane.showMessageDialog(this, "Un profil de client avec ce nom existe déjà. Veuillez en utiliser un autre");
                }                
            }
            else
            {
                boolean nameExists = false; 
                for(int i = 0; i < controller.getListClientProfile().size(); i++)
                {
                    if(controller.getListClientProfile().get(i).getName().equalsIgnoreCase(txtName.getText()))
                    {
                        nameExists = true;
                        break;
                    }
                }
                if(!nameExists || profile.getName().equalsIgnoreCase(txtName.getText()))
                {

                     profile.setName(txtName.getText());
                     List<Itinary> itinaries = new ArrayList<Itinary>();
                     for(int j = 0; j < listModel.getSize(); j++)
                     {
                         String element = lstItinary.getModel().getElementAt(j).toString();
                         String tripName = element.substring(0, element.indexOf(":"));
                         String originNodeName = element.substring(element.indexOf(" ") + 1, element.indexOf("|") -1);
                         String destinationNodeName = element.substring(element.indexOf("|") + 2);

                         Domain.Client.Itinary itinary = new Domain.Client.Itinary((Domain.Node.Stop)controller.getNodeByName(originNodeName),
                                                                                   (Domain.Node.Stop)controller.getNodeByName(destinationNodeName),
                                                                                   controller.getTripByName(tripName));
                         itinaries.add(itinary);
                     }
                     profile.setItinary(itinaries);
                     dispose();
                }else{
                    JOptionPane.showMessageDialog(this, "Un profil de client avec ce nom existe déjà. Veuillez en utiliser un autre");
                }                               
            }
        }else{
            JOptionPane.showMessageDialog(this, "Assurez-vous d'avoir rempli tous les champs avant \nla création ou la modification du profil de client.");
        }
    }
    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) 
    {
        int dialogButton = JOptionPane.YES_NO_OPTION;
        int dialogResult = JOptionPane.showConfirmDialog(this, "Êtes-vous certain de vouloir supprimer ce profil de client ? \n Tous les générateurs de clients lui étant associé seront également supprimés.","Avertissement",dialogButton);
        if(dialogResult == JOptionPane.YES_OPTION)
        {
            controller.deleteClientProfile(profile);
            dispose();
        }
    }
    private void btnAddItinaryActionPerformed(java.awt.event.ActionEvent evt) {                                              
        ModifyItinary form;
        if(this.lstItinary.getModel().getSize() == 0)
        {
            form = new ModifyItinary(controller, null);
        }else{
            String element = lstItinary.getModel().getElementAt(this.lstItinary.getModel().getSize() -1).toString();                
            String destinationNodeName = element.substring(element.indexOf("|") + 2);
            form = new ModifyItinary(controller, destinationNodeName);
        }
        form.addWindowListener(new java.awt.event.WindowAdapter ()
        {
            @Override
            public void windowClosed(java.awt.event.WindowEvent e)
            {
                if(form.getItinary() != null)
                {
                    String itinaryText = form.getItinary().getTrip().getName() + ": ";
                    itinaryText += form.getItinary().getOriginStop().getName() + " | ";
                    itinaryText += form.getItinary().getDestinationStop().getName();
                    listModel.addElement(itinaryText);
                    lstItinary.setModel(listModel);
                }
            }
        });
        form.setVisible(true);
    }    
    

    private javax.swing.JButton btnAddItinary;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnOk;
    private javax.swing.JLabel lblName;
    private javax.swing.JTextField txtName;
    private javax.swing.JLabel lblItinary;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JList lstItinary;
    private javax.swing.JScrollPane scrollPaneItinary;
}
